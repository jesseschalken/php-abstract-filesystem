<?php declare(strict_types = 1);

namespace JesseSchalken\FileSystem;

use JesseSchalken\StreamWrapper\FileSystemStreamWrapper;
use JesseSchalken\StreamWrapper\StreamWrapper;

abstract class FileSystem {
    /**
     * Joins the given paths together like `"$path1/$path2"` but without adding a directory separator unnecessarily.
     */
    public final function joinPaths(string $path1, string $path2):string {
        foreach ($this->getValidDirectorySeparators() as $sep) {
            $len = strlen($sep);
            if (
                $len == 0 ||
                substr($path1, -$len) === $sep ||
                substr($path2, 0, $len) === $sep
            ) {
                return $path1 . $path2;
            }
        }

        return $path1 . $this->getDirectorySeparator() . $path2;
    }

    public abstract function readDirectory(string $path):\Iterator;

    public abstract function createDirectory(string $path, int $mode, bool $recursive = false):void;

    public abstract function rename(string $path1, string $path2):void;

    public abstract function removeDirectory(string $path):void;

    public abstract function openFile(string $path, string $mode):OpenFile;

    public abstract function setLastModified(string $path, int $lastModified, int $lastAccessed):void;

    public abstract function setUserById(string $path, int $userId):void;

    public abstract function setUserByName(string $path, string $userName):void;

    public abstract function setGroupById(string $path, int $groupId):void;

    public abstract function setGroupByName(string $path, string $groupName):void;

    public abstract function setPermissions(string $path, int $mode):void;

    public abstract function getAttributes(string $path, bool $followLinks):FileAttributes;

    public abstract function delete(string $path):void;

    /**
     * Get the path used to resolve relative paths. The returned path will be in canonical form, as if passed through
     * realPath().
     */
    public abstract function getCurrentDirectory():string;

    /**
     * Set the path used to resolve relative paths. Error if the given path does not exist or is not a directory.
     */
    public abstract function setCurrentDirectory(string $path):void;

    /**
     * Create a symbolic link.
     */
    public abstract function createLink(string $linkPath, string $linkContents):void;

    /**
     * Read the given symbolic link.
     */
    public abstract function readLink(string $linkPath):void;

    /**
     * Return the canonical path for the directory entry denoted by the given path. The canonical path should be
     * absolute and have all symbolic links, /./, /../ and // resolved.
     */
    public abstract function realPath(string $path):string;

    /**
     * ['/'] on Mac/Linux, ['/', '\\'] on Windows
     * @return string[]
     */
    public function getValidDirectorySeparators():array { return [$this->getDirectorySeparator()]; }

    /**
     * '/' on Mac/Linux, '\\' on Windows
     */
    public function getDirectorySeparator():string { return '/'; }

    /**
     * Get a stream wrapper for this filesystem. The caller must hold on to a reference to the returned object for
     * stream wrapper URLs generated by the stream wrapper to continue to work.
     */
    public function getStreamWrapper():StreamWrapper {
        return new FileSystemStreamWrapper($this);
    }
}

abstract class OpenFile {
    public abstract function read(int $count):string;

    public abstract function toResource();

    public abstract function isEof():bool;

    public abstract function flush():void;

    public abstract function setLock(int $lock):void;

    public abstract function setLockNoBlock(int $lock):bool;

    public abstract function addPosition(int $position):void;

    public abstract function setPosition(int $position, bool $fromEnd = false):void;

    public abstract function getPosition():int;

    public abstract function setSize(int $size):void;

    public abstract function write(string $data):int;

    public function getAttributes():FileAttributes { return new FileAttributes; }

    public function setBlocking(bool $blocking):void { }

    public function setReadTimeout(int $seconds, int $microseconds):void { }

    public function setWriteBuffer(int $size):void { }
}

class FileAttributes {
    public final function toArray():array {
        return [
            'dev'     => $this->getDevice(),
            'ino'     => $this->getId(),
            'mode'    => $this->getPermissions() | ($this->getType() << 12),
            'nlink'   => $this->getRefCount(),
            'uid'     => $this->getUserId(),
            'gid'     => $this->getGroupId(),
            'rdev'    => $this->getInnerDevice(),
            'size'    => $this->getSize(),
            'atime'   => $this->getLastAccessed(),
            'mtime'   => $this->getLastModified(),
            'ctime'   => $this->getLastChanged(),
            'blksize' => $this->getBlockSize(),
            'blocks'  => $this->getBlocks(),
        ];
    }

    public function getDevice():int { return 0; }

    public function getId():int { return 0; }

    public function getPermissions():int { return 0; }

    public function getType():int { return FileType::FILE; }

    public function getRefCount():int { return 1; }

    public function getUserId():int { return 0; }

    public function getGroupId():int { return 0; }

    public function getInnerDevice():int { return 0; }

    public function getSize():int { return 0; }

    public function getLastAccessed():int { return 0; }

    public function getLastModified():int { return 0; }

    public function getLastChanged():int { return 0; }

    public function getBlockSize():int { return -1; }

    public function getBlocks():int { return -1; }
}

final class FileLock {
    const SHARED    = LOCK_SH;
    const EXCLUSIVE = LOCK_EX;
    const NONE      = LOCK_UN;
}

/**
 * Exception to be thrown if any operation fails but the system is stable. This includes things like "permission
 * denied" and "file not found", for example.
 */
class Exception extends \RuntimeException {
}

final class FileOpenMode {
    const OPEN_READ_ONLY             = 'r';
    const OPEN_READ_WRITE            = 'r+';
    const OPEN_CREATE_WRITE_ONLY     = 'c';
    const OPEN_CREATE_READ_WRITE     = 'c+';
    const APPEND_WRITE_ONLY          = 'a';
    const APPEND_READ_WRITE          = 'a+';
    const CREATE_WRITE_ONLY          = 'x';
    const CREATE_READ_WRITE          = 'x+';
    const CREATE_TRUNCATE_WRITE_ONLY = 'w';
    const CREATE_TRUNCATE_READ_WRITE = 'w+';
}

final class FilePermissions {
    const SET_UID     = 04000;
    const SET_GID     = 02000;
    const STICKY      = 01000;
    const USER_READ   = 00400;
    const USER_WRITE  = 00200;
    const USER_EXEC   = 00100;
    const GROUP_READ  = 00040;
    const GROUP_WRITE = 00020;
    const GROUP_EXEC  = 00010;
    const OTHER_READ  = 00004;
    const OTHER_WRITE = 00002;
    const OTHER_EXEC  = 00001;
}

final class FileType {
    const PIPE   = 001;
    const CHAR   = 002;
    const DIR    = 004;
    const BLOCK  = 006;
    const FILE   = 010;
    const LINK   = 012;
    const SOCKET = 014;
    const DOOR   = 015;
}

